<?xml version="1.0" encoding="utf-8" ?>
<nlog
  xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  autoReload="true">
  <targets>
    <target name="logfile" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="File" fileName="${environment:variable=LOGS_PATH}/sample/${shortdate}/sample_${date:format=HH}.log" layout="${longdate} | ${machinename} | ${threadId:padding=-4} | ${logger:shortName=true} | ${level:uppercase=true} | ${message} ${onexception:&gt;&gt; ${exception:format=Type,Message,StackTrace:separator= :innerFormat=Type,Message,StackTrace:maxInnerExceptionLevel=5:innerExceptionSeparator=  } &lt;&lt;}" /></target>
    <target name="console" xsi:type="ColoredConsole" layout="${date:format=HH\:mm\:ss} ${level:padding=-5} ${message}">
      <highlight-row condition="level = LogLevel.Debug" foregroundColor="DarkGray" />
      <highlight-row condition="level = LogLevel.Info" foregroundColor="Gray" />
      <highlight-row condition="level = LogLevel.Warn" foregroundColor="White" />
      <highlight-row condition="level = LogLevel.Error" foregroundColor="Red" />
      <highlight-row condition="level = LogLevel.Fatal" foregroundColor="White" backgroundColor="DarkRed" />
      <highlight-word text="Starting" foregroundColor="Yellow" />
      <highlight-word text="Stopping" foregroundColor="Yellow" />
    </target>
  </targets>
  <rules>
    <logger name="*" minlevel="Debug" writeTo="logfile">
      <filters>
        <when condition="level &lt; LogLevel.Warn and (starts-with('${logger}','NServiceBus.') or starts-with('${logger}','ServiceControl.') or starts-with('${logger}','Quartz.'))" action="Ignore" />
        <when condition="ends-with('${logger}','LogOutgoingMessage')" action="Ignore" />
        <when condition="level &gt;= LogLevel.Warn and ends-with('${logger}','NHibernateSynchronizedStorageAdapter')" action="Ignore" />
      </filters>
    </logger>
    <logger name="*" minlevel="Info" writeTo="console">
      <filters>
        <when condition="level &lt; LogLevel.Warn and (starts-with('${logger}','NServiceBus.') or starts-with('${logger}','ServiceControl.') or starts-with('${logger}','Quartz.'))" action="Ignore" />
        <when condition="ends-with('${logger}','LogOutgoingMessage')" action="Ignore" />
        <when condition="level &gt;= LogLevel.Warn and ends-with('${logger}','NHibernateSynchronizedStorageAdapter')" action="Ignore" />
      </filters>
    </logger>
  </rules>
</nlog>